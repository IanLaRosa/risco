{"version":3,"sources":["Home.js","ActivePlane.js","NoMatch.js","components/Layout.js","components/NavigationBar.js","components/Jumbotron.js","App.js","serviceWorker.js","index.js","assets/airplaneImage.jpg"],"names":["Home","useState","chartData","setChartData","chartBData","setChartBData","dados","setDados","eixox","setEixox","useEffect","fetch","then","response","json","data","labels","times","datasets","label","reads","backgroundColor","borderWidth","console","log","className","style","height","width","options","responsive","ActivePlane","NoMatch","Layout","props","Container","children","Styles","styled","div","NavigationBar","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Item","Link","airplaneImage","Jumbotron","fluid","App","Fragment","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.d0645c7e.chunk.js","sourcesContent":["import React, { useState, useEffect, Component } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\n\r\nconst Home = () => {\r\n    const [chartData, setChartData] = useState({})\r\n    const [chartBData, setChartBData] = useState({})\r\n    const [dados, setDados] = useState({})\r\n    const [eixox, setEixox] = useState({})\r\n    const chart = () => {\r\n        setChartData({\r\n            labels: eixox.times,\r\n            datasets: [\r\n                {\r\n                    label: 'Energia [Watts]',\r\n                    data: dados.reads,\r\n                    backgroundColor: [\r\n                        'rgba(75, 192, 192, 0.6)'\r\n                    ],\r\n                    borderWidth: 4\r\n                }\r\n            ]\r\n        })\r\n    }\r\n\r\n    const chartB = () => {\r\n        setChartBData({\r\n            labels: [],\r\n            datasets: [\r\n                {\r\n                    label: 'Energia [Watts]',\r\n                    data: [],\r\n                    backgroundColor: [\r\n                        'rgba(75, 192, 192, 0.6)'\r\n                    ],\r\n                    borderWidth: 4\r\n                }\r\n            ]\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetch(\"http://127.0.0.1:5000/readings\").then(response => response.json().then(data => {setDados(data)}))\r\n        fetch(\"http://127.0.0.1:5000/time\").then(response => response.json().then(data => {setEixox(data)}))\r\n        chart()\r\n        chartB()\r\n    },[])\r\n\r\n    console.log(dados.reads)\r\n    console.log(eixox.times)\r\n    return(\r\n        <div className=\"App\">\r\n            <h1>Consumo iluminação da cabine no vôo</h1>\r\n            <div style={{height: \"600px\", width:\"800px\"}}>\r\n                <Line data={chartData} options={{\r\n                    responsive: true\r\n                }}/>\r\n            </div>\r\n            <h1>Consumo ar condicionado da cabine no vôo</h1>\r\n            <div style={{height: \"600px\", width:\"800px\"}}>\r\n                <Line data={chartBData} options={{\r\n                    responsive: true\r\n                }}/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react'\r\n\r\nexport const ActivePlane = () => (\r\n    <div>\r\n        <h2>ACTIVE PLANE</h2>\r\n        <p>AAAAAAAA Ipsum Dolor Sit Amet</p>\r\n    </div>\r\n)","import React from 'react'\r\n\r\nexport const NoMatch = () => (\r\n    <div>\r\n        <h2>404</h2>\r\n        <p>AAAAABBBBBAAA</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nexport const Layout = (props) => (\r\n    <Container>\r\n        {props.children}\r\n    </Container>\r\n)","import React from 'react'\r\nimport { Nav, Navbar } from 'react-bootstrap'\r\nimport styled from 'styled-components'\r\n\r\nconst Styles = styled.div`\r\n    .navbar {\r\n        background-color: #222;\r\n    }\r\n\r\n    .navbar-brand, .navbar-nav .nav-link {\r\n        color: #bbb;\r\n\r\n        &:hover {\r\n            color: white;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const NavigationBar = () =>(\r\n    <Styles>\r\n        <Navbar expand=\"lg\">\r\n            <Navbar.Brand href=\"/risco/\">Flight Analysis</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"ml-auto\">\r\n                    <Nav.Item><Nav.Link href=\"/risco/\">Home</Nav.Link></Nav.Item>\r\n                    <Nav.Item><Nav.Link href=\"/risco/ActivePlane/\">Flight Data Select</Nav.Link></Nav.Item>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    </Styles>\r\n\r\n)","import React from 'react'\r\nimport {Jumbotron as Jumbo, Container } from 'react-bootstrap'\r\nimport styled from 'styled-components'\r\nimport airplaneImage from '../assets/airplaneImage.jpg'\r\n\r\nconst Styles = styled.div`\r\n    .jumbo {\r\n        background: url(${airplaneImage});\r\n        background-size: cover;\r\n        color: #ccc;\r\n        height: 200px;\r\n        position: relative;\r\n        z-index: -2;\r\n    }\r\n\r\n    .overlay {\r\n        background-color: #000;\r\n        opacity: 0.6;\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        bottom: 0;\r\n        right: 0;\r\n        z-index: -1;\r\n    }\r\n`;\r\n\r\nexport const Jumbotron = () => (\r\n    <Styles>\r\n        <Jumbo fluid className=\"jumbo\">\r\n            <div className=\"overlay\"></div>\r\n            <Container>\r\n                <h1>Perfil de Consumo de Energia</h1>\r\n            </Container>\r\n        </Jumbo>\r\n    </Styles>\r\n\r\n)","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport  Home  from './Home'\nimport { ActivePlane } from './ActivePlane'\nimport { NoMatch } from './NoMatch'\nimport { Layout } from './components/Layout'\nimport { NavigationBar } from './components/NavigationBar'\nimport { Jumbotron } from './components/Jumbotron'\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <NavigationBar />\n      <Jumbotron />\n      <Layout>\n      <Router>\n        <Switch>\n          <Route exact path=\"/risco/\" component={Home}/>\n          <Route exact path=\"/risco/ActivePlane/\" component={ActivePlane}/>\n          <Route component={NoMatch} />\n        </Switch>\n      </Router>\n      </Layout>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/airplaneImage.f82d535a.jpg\";"],"sourceRoot":""}